We are given an array consisting of n integers and an integer k. We need to find the minimum length of a subarray
such that there are exactly k different numbers. 
If such subarray doesnâ€™t exist print -1.

{ 1, 1, 2, 2, 3, 3, 4, 5} 
ans=3;
array = {3,4,5}

{2,2,1,1,3}
ans=4;
array={2,1,1,3}

#include <bits/stdc++.h>
using namespace std;
int minRange(vector<int>arr, int k)
{
    int n=arr.size();
    unordered_map<int, int> map;
    int i = 0, j = 0;
    int mini=INT_MAX;
    while (j < n) {
        map[arr[j]]++;
        if(map.size()==k){
            mini=min(mini,j-i+1);
            while (i<j && map.size() == k) {
                if (map[arr[i]] == 1)
                    map.erase(arr[i]);
                else
                    map[arr[i]]--;
     
                i++;                
                if(map.size()==k)
                {
                    mini=min(mini,j-i+1);                  
                }                
            }         
        }
        j++;      
    }
 
    if (mini==INT_MAX)
        return -1;
 
    else
    return mini;
}
 
// Driver code for above function.
int main()
{
    vector<int> arr = {2,2,1,1,3};
    int k = 3;
    cout<<minRange(arr, k);
    return 0;
}
 
