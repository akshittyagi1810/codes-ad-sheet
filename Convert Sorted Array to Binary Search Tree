Given an integer array nums where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.
A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* buildtree(vector<int>& nums,int i){
        if(i>=nums.size()) return NULL;
        
        TreeNode* root = new TreeNode(nums[i]);
        root->left=buildtree(nums,2*i+1);
        root->right=buildtree(nums,2*i+2);
        return root;
    }
    void inorder(TreeNode* root){
        if(root==NULL)return;
        
        inorder(root->left);
        cout<<root->val<<" ";
        inorder(root->right);
    }
    void BTtoBST(TreeNode* root,vector<int>& nums,int &i){
        if(root==NULL) return;
        
        BTtoBST(root->left,nums,i);
        root->val=nums[i];i++;
        BTtoBST(root->right,nums,i);
    }
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        int i=0;
        TreeNode* root=buildtree(nums,i);
        //inorder(root);
        BTtoBST(root,nums,i);
        return root;
    }
};
