Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
In other words, return true if one of s1's permutations is the substring of s2.

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").

class Solution {
public:
    bool check(vector<int> count1,vector<int> count2){
        for(int i=0;i<26;i++){
            if(count1[i]!=count2[i]) return false;
        }
        return true;
    }
    bool checkInclusion(string s1, string s2) {
        vector<int> count1(26,0);
        if(s1.size()>s2.size()) return false;
        for(int i=0;i<s1.size();i++){
            count1[s1[i]-'a']++;
        }
        
        vector<int>count2(26,0);
        for(int i=0;i<s1.size();i++){
            count2[s2[i]-'a']++;
        }
        
        if(check(count1,count2)) return true;
        int size1=s1.size();
        for(int i=size1;i<s2.size();i++){
            char lastch=s2[i-size1];
            count2[lastch-'a']--;
            count2[s2[i]-'a']++;
            if(check(count1,count2)) return true;
        }
        
        return false;
        
    }
};
